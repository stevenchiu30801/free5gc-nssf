/*
 * NSSF NSSAI Availability
 *
 * NSSF NSSAI Availability Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nssaiavailability

import (
	"net/http"
    "strings"

    "github.com/gin-gonic/gin"

    "free5gc-nssf/flog"
    . "free5gc-nssf/model"
    "free5gc-nssf/util"
)

// NSSAIAvailabilityDelete - Deletes an already existing S-NSSAIs per TA provided by the NF service consumer (e.g AMF)
func NSSAIAvailabilityDelete(c *gin.Context) {

    flog.Nssaiavailability.Infof("Request received - NSSAIAvailabilityDelete")

    var (
        nfId string
        status int
        d ProblemDetails
    )

    // Parse nfId from URL path
    nfId = c.Param("nfId")

    status = nssaiavailabilityDelete(nfId, &d)

    // Set response
    switch status {
        case http.StatusNoContent:
            c.JSON(status, gin.H{})
            flog.Nssaiavailability.Infof("Response code 204 No Content")
        case http.StatusNotFound:
            c.JSON(status, d)
            flog.Nssaiavailability.Infof(d.Detail)
            flog.Nssaiavailability.Infof("Response code 404 Not Found")
        default:
            flog.Nssaiavailability.Warnf("Unknown response code")
    }
}

// NSSAIAvailabilityPatch - Updates an already existing S-NSSAIs per TA provided by the NF service consumer (e.g AMF)
func NSSAIAvailabilityPatch(c *gin.Context) {

    flog.Nssaiavailability.Infof("Request received - NSSAIAvailabilityPatch")

    var (
        isValidRequest bool = true
        nfId string
        status int
        p PatchDocument
        a AuthorizedNssaiAvailabilityInfo
        d ProblemDetails
    )

    // Parse nfId from URL path
    nfId = c.Param("nfId")

    // Parse request body
    err := c.BindJSON(&p)
    if err != nil {
        problemDetail := "[Request Body] " + err.Error()
        status = http.StatusBadRequest
        d = ProblemDetails {
            Title: util.MALFORMED_REQUEST,
            Status: http.StatusBadRequest,
            Detail: problemDetail,
        }
        isValidRequest = false
    }

    // Check data integrity
    err = p.CheckIntegrity()
    if err != nil {
        problemDetail := "[Request Body] " + err.Error()
        s := strings.Split(problemDetail, "`")
        status = http.StatusBadRequest
        if len(s) >= 2 {
            invalidParam := s[len(s) - 2]
            d = ProblemDetails {
                Title: util.INVALID_REQUEST,
                Status: http.StatusBadRequest,
                Detail: problemDetail,
                InvalidParams: []InvalidParam {
                    {
                        Param: invalidParam,
                        Reason: problemDetail,
                    },
                },
            }
        } else {
            d = ProblemDetails {
                Title: util.INVALID_REQUEST,
                Status: http.StatusBadRequest,
                Detail: problemDetail,
            }
        }
        isValidRequest = false
    }

    // TODO: Request NfProfile of NfId from NRF
    //       Check if NfId is valid AMF and obtain AMF Set ID
    //       If NfId is invalid, return ProblemDetails with code 404 Not Found
    //       If NF consumer is not authorized to update NSSAI availability, return ProblemDetails with code 403 Forbidden

    if isValidRequest == true {
        status = nssaiavailabilityPatch(nfId, p, &a, &d)
    }

    // Set response
    switch status {
        case http.StatusOK:
            c.JSON(status, a)
            flog.Nssaiavailability.Infof("Response code 200 OK")
        case http.StatusBadRequest:
            c.JSON(status, d)
            flog.Nssaiavailability.Infof(d.Detail)
            flog.Nssaiavailability.Infof("Response code 400 Bad Request")
        case http.StatusForbidden:
            c.JSON(status, d)
            flog.Nssaiavailability.Infof(d.Detail)
            flog.Nssaiavailability.Infof("Response code 403 Forbidden")
        case http.StatusNotFound:
            c.JSON(status, d)
            flog.Nssaiavailability.Infof(d.Detail)
            flog.Nssaiavailability.Infof("Response code 404 Not Found")
        case http.StatusConflict:
            c.JSON(status, d)
            flog.Nssaiavailability.Infof(d.Detail)
            flog.Nssaiavailability.Infof("Response code 409 Conflict")
        default:
            flog.Nssaiavailability.Warnf("Unknown response code")
    }
}

// NSSAIAvailabilityPut - Updates/replaces the NSSF with the S-NSSAIs the NF service consumer (e.g AMF) supports per TA
func NSSAIAvailabilityPut(c *gin.Context) {

    flog.Nssaiavailability.Infof("Request received - NSSAIAvailabilityPut")

    var (
        isValidRequest bool = true
        nfId string
        status int
        n NssaiAvailabilityInfo
        a AuthorizedNssaiAvailabilityInfo
        d ProblemDetails
    )

    // Parse nfId from URL path
    nfId = c.Param("nfId")

    // Parse request body
    err := c.BindJSON(&n)
    if err != nil {
        problemDetail := "[Request Body] " + err.Error()
        status = http.StatusBadRequest
        d = ProblemDetails {
            Title: util.MALFORMED_REQUEST,
            Status: http.StatusBadRequest,
            Detail: problemDetail,
        }
        isValidRequest = false
    }

    // Check data integrity
    err = n.CheckIntegrity()
    if err != nil {
        problemDetail := "[Request Body] " + err.Error()
        s := strings.Split(problemDetail, "`")
        status = http.StatusBadRequest
        if len(s) >= 2 {
            invalidParam := s[len(s) - 2]
            d = ProblemDetails {
                Title: util.INVALID_REQUEST,
                Status: http.StatusBadRequest,
                Detail: problemDetail,
                InvalidParams: []InvalidParam {
                    {
                        Param: invalidParam,
                        Reason: problemDetail,
                    },
                },
            }
        } else {
            d = ProblemDetails {
                Title: util.INVALID_REQUEST,
                Status: http.StatusBadRequest,
                Detail: problemDetail,
            }
        }
        isValidRequest = false
    }

    // TODO: Request NfProfile of NfId from NRF
    //       Check if NfId is valid AMF and obtain AMF Set ID
    //       If NfId is invalid, return ProblemDetails with code 404 Not Found
    //       If NF consumer is not authorized to update NSSAI availability, return ProblemDetails with code 403 Forbidden

    if isValidRequest == true {
        status = nssaiavailabilityPut(nfId, n, &a, &d)
    }

    // Set response
    switch status {
        case http.StatusOK:
            c.JSON(status, a)
            flog.Nssaiavailability.Infof("Response code 200 OK")
        case http.StatusBadRequest:
            c.JSON(status, d)
            flog.Nssaiavailability.Infof(d.Detail)
            flog.Nssaiavailability.Infof("Response code 400 Bad Request")
        case http.StatusForbidden:
            c.JSON(status, d)
            flog.Nssaiavailability.Infof(d.Detail)
            flog.Nssaiavailability.Infof("Response code 403 Forbidden")
        default:
            flog.Nssaiavailability.Warnf("Unknown response code")
    }
}
