/*
 * NSSF NSSAI Availability
 *
 * NSSF NSSAI Availability Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package model

import (
    "fmt"
    "sort"
)

type RestrictedSnssai struct {

    HomePlmnId *PlmnId `json:"homePlmnId" yaml:"homePlmnId"`

    SNssaiList []Snssai `json:"sNssaiList" yaml:"sNssaiList"`
}

func (r *RestrictedSnssai) CheckIntegrity() error {
    if r.HomePlmnId == nil {
        return fmt.Errorf("`homePlmnId` should not be empty")
    } else {
        err := r.HomePlmnId.CheckIntegrity()
        if err != nil {
            return fmt.Errorf("`homePlmnId`:%s", err.Error())
        }
    }

    if r.SNssaiList == nil || len(r.SNssaiList) == 0 {
        return fmt.Errorf("`sNssaiList` should not be empty")
    } else {
        for i, snssai := range r.SNssaiList {
            err := snssai.CheckIntegrity()
            if err != nil {
                return fmt.Errorf("`sNssaiList`[%d]:%s", i, err.Error())
            }
        }
    }

    return nil
}

type ByHomePlmnId []RestrictedSnssai

func (h ByHomePlmnId) Len() int {
    return len(h)
}

func (h ByHomePlmnId) Swap(i, j int) {
    h[i], h[j] = h[j], h[i]
}

func (h ByHomePlmnId) Less(i, j int) bool {
    if h[i].HomePlmnId.Mcc == h[j].HomePlmnId.Mcc {
        return h[i].HomePlmnId.Mnc < h[j].HomePlmnId.Mnc
    } else {
        return h[i].HomePlmnId.Mcc < h[j].HomePlmnId.Mcc
    }
}

func (h *ByHomePlmnId) Sort() {
    for i := range *h {
        sort.Sort(BySst((*h)[i].SNssaiList))
    }

    sort.Sort(*h)
}
