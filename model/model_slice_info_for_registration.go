/*
 * NSSF NS Selection
 *
 * NSSF Network Slice Selection Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package model

import (
    "errors"
    "strconv"
)

type SliceInfoForRegistration struct {

	SubscribedNssai []SubscribedSnssai `json:"subscribedNssai,omitempty"`

	AllowedNssaiCurrentAccess *AllowedNssai `json:"allowedNssaiCurrentAccess,omitempty"`

	AllowedNssaiOtherAccess *AllowedNssai `json:"allowedNssaiOtherAccess,omitempty"`

	SNssaiForMapping []Snssai `json:"sNssaiForMapping,omitempty"`

	RequestedNssai []Snssai `json:"requestedNssai,omitempty"`

	DefaultConfiguredSnssaiInd bool `json:"defaultConfiguredSnssaiInd,omitempty"`

	MappingOfNssai []MappingOfSnssai `json:"mappingOfNssai,omitempty"`

	RequestMapping bool `json:"requestMapping,omitempty"`
}

func (s *SliceInfoForRegistration) CheckIntegrity() error {
    if s.SubscribedNssai != nil || len(s.SubscribedNssai) != 0 {
        for i, subscribedSnssai := range s.SubscribedNssai {
            err := subscribedSnssai.CheckIntegrity()
            if err != nil {
                errMsg := "`subscribedNssai`[" + strconv.Itoa(i) + "]:" + err.Error()
                return errors.New(errMsg)
            }
        }
    }

    if s.AllowedNssaiCurrentAccess != nil {
        err := s.AllowedNssaiCurrentAccess.CheckIntegrity()
        if err != nil {
            errMsg := "`allowedNssaiCurrentAccess`:" + err.Error()
            return errors.New(errMsg)
        }
    }

    if s.AllowedNssaiOtherAccess != nil {
        err := s.AllowedNssaiOtherAccess.CheckIntegrity()
        if err != nil {
            errMsg := "`allowedNssaiOtherAccess`:" + err.Error()
            return errors.New(errMsg)
        }
    }

    if s.RequestMapping == true && (s.SNssaiForMapping == nil || len(s.SNssaiForMapping) == 0) {
        return errors.New("`sNssaiForMapping` in query parameter should be included when `requestMapping` is set to true")
    } else if s.SNssaiForMapping != nil || len(s.SNssaiForMapping) != 0 {
        for i, sNssaiForMapping := range s.SNssaiForMapping {
            err := sNssaiForMapping.CheckIntegrity()
            if err != nil {
                errMsg := "`sNssaiForMapping`[" + strconv.Itoa(i) + "]:" + err.Error()
                return errors.New(errMsg)
            }
        }
    }

    if s.RequestedNssai != nil || len(s.RequestedNssai) != 0 {
        for i, requestedSnssai := range s.RequestedNssai {
            err := requestedSnssai.CheckIntegrity()
            if err != nil {
                errMsg := "`requestedNssai`[" + strconv.Itoa(i) + "]:" + err.Error()
                return errors.New(errMsg)
            }
        }
    }

    if s.MappingOfNssai != nil || len(s.MappingOfNssai) != 0 {
        for i, mappingOfSnssai := range s.MappingOfNssai {
            err := mappingOfSnssai.CheckIntegrity()
            if err != nil {
                errMsg := "`mappingOfNssai`[" + strconv.Itoa(i) + "]:" + err.Error()
                return errors.New(errMsg)
            }
        }
    }

    return nil
}
