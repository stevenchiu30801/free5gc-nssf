/*
 * NSSF NS Selection
 *
 * NSSF Network Slice Selection Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nssf

import (
    "encoding/json"
    "fmt"
    "net/http"
    "strings"

    flog "../flog"
    . "../model"
)

// Title in Problem Details for NSSF HTTP APIs
const (
    INVALID_REQUEST = "Invalid request message framing"
    MALFORMED_REQUEST = "Malformed request syntax"
    UNAUTHORIZED_CONSUMER = "Unauthorized NF service consumer"
    UNSUPPORTED_RESOURCE = "Unsupported request resources"
)

// Parse NSSelectionGet query parameter
func parseQueryParameter(r *http.Request) (p NsselectionQueryParameter, err error) {

    q := r.URL.Query()

    if q.Get("nf-type") != "" {
        p.NfType = new(NfType)
        *p.NfType = NfType(q.Get("nf-type"))
    }

    p.NfId = q.Get("nf-id")

    if q.Get("slice-info-request-for-registration") != "" {
        p.SliceInfoRequestForRegistration = new(SliceInfoForRegistration)
        err = json.NewDecoder(strings.NewReader(q.Get("slice-info-request-for-registration"))).Decode(p.SliceInfoRequestForRegistration)
        if err != nil {
            return
        }
    }

    if q.Get("slice-info-request-for-pdu-session") != "" {
        p.SliceInfoRequestForPduSession = new(SliceInfoForPduSession)
        err = json.NewDecoder(strings.NewReader(q.Get("slice-info-request-for-pdu-session"))).Decode(p.SliceInfoRequestForPduSession)
        if err != nil {
            return
        }
    }

    if q.Get("home-plmn-id") != "" {
        p.HomePlmnId = new(PlmnId)
        err = json.NewDecoder(strings.NewReader(q.Get("home-plmn-id"))).Decode(p.HomePlmnId)
        if err != nil {
            return
        }
    }

    if q.Get("tai") != "" {
        p.Tai = new(Tai)
        err = json.NewDecoder(strings.NewReader(q.Get("tai"))).Decode(p.Tai)
        if err != nil {
            return
        }
    }

    if q.Get("supported-features") != "" {
        p.SupportedFeatures = q.Get("supported-features")
    }

    return
}

// Check if the NF service consumer is authorized
// TODO: Check if the NF service consumer is legal with local configuration, or possibly after querying NRF through
//       `nf-id` e.g. Whether the V-NSSF is authorized
func checkNfServiceConsumer(nfType NfType) error {
    if nfType != AMF && nfType != NSSF {
        return fmt.Errorf("`nf-type`:'%s' is not authorized to retrieve the slice selection information", string(nfType))
    }

    return nil
}

// NSSelectionGet - Retrieve the Network Slice Selection Information
func NSSelectionGet(w http.ResponseWriter, r *http.Request) {

    flog.Nsselection.Infof("Request received - NSSelectionGet")

    var (
        isValidRequest bool = true
        status int
        a AuthorizedNetworkSliceInfo
        d ProblemDetails
    )

    // TODO: Record request times of the NF service consumer and response with ProblemDetails of 429 Too Many Requests
    //       if the consumer has sent too many requests in a configured amount of time
    // TODO: Check URI length and response with ProblemDetails of 414 URI Too Long if URI is too long

    // Parse query parameter
    p, err := parseQueryParameter(r)
    if err != nil {
        problemDetail := "[Query Parameter] " + err.Error()
        status = http.StatusBadRequest
        d = ProblemDetails {
            Title: MALFORMED_REQUEST,
            Status: http.StatusBadRequest,
            Detail: problemDetail,
        }
        isValidRequest = false
    }

    // Check data integrity
    err = p.CheckIntegrity()
    if err != nil {
        problemDetail := "[Query Parameter] " + err.Error()
        s := strings.Split(problemDetail, "`")
        invalidParam := s[len(s) - 2]
        status = http.StatusBadRequest
        d = ProblemDetails {
            Title: INVALID_REQUEST,
            Status: http.StatusBadRequest,
            Detail: problemDetail,
            InvalidParams: []InvalidParam {
                {
                    Param: invalidParam,
                    Reason: problemDetail,
                },
            },
        }
        isValidRequest = false
    }

    // Check permission of NF service consumer
    err = checkNfServiceConsumer(*p.NfType)
    if err != nil {
        problemDetail := err.Error()
        status = http.StatusForbidden
        d = ProblemDetails {
            Title: UNAUTHORIZED_CONSUMER,
            Status: http.StatusForbidden,
            Detail: problemDetail,
        }
        isValidRequest = false
    }

    if isValidRequest == true {
        if p.SliceInfoRequestForRegistration != nil {
            // Network slice information is requested during the Registration procedure
            status = nsselectionForRegistration(p, &a, &d)
        } else {
            // Network slice information is requested during the PDU session establishment procedure
            status = nsselectionForPduSession(p, &a, &d)
        }
    }

    // Set response
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")

    w.WriteHeader(status)
    switch status {
        case http.StatusOK:
            json.NewEncoder(w).Encode(&a)
            flog.Nsselection.Infof("Response code 200 OK")
        case http.StatusBadRequest:
            json.NewEncoder(w).Encode(&d)
            flog.Nsselection.Infof(d.Detail)
            flog.Nsselection.Infof("Response code 400 Bad Request")
        case http.StatusForbidden:
            json.NewEncoder(w).Encode(&d)
            flog.Nsselection.Infof(d.Detail)
            flog.Nsselection.Infof("Response code 403 Forbidden")
        default:
            flog.Nsselection.Warnf("Unknown response code")
    }
}
